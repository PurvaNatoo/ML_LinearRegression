# -*- coding: utf-8 -*-
"""Stock Price Live Prediction - Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vTFpyMaBz6mF-yaeEzaAHQJ4S7VDBidv

##Stock Price Prediction



*   Project By: Purva Natoo
*   Model used: Linear Regression
*   API used for data: Yahoo Finance

Getting necessary imports
"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pickle
import os
from datetime import datetime

!pip install requests_html

!pip install yahoo_fin
from yahoo_fin.stock_info import get_data

"""Get stock ticker name from user"""

ticker = input("Enter the stock ticker name (Enter 'none' for default): ")
if ticker=='none':
  ticker = 'amzn'

"""Get start date of dataset from user"""

startYear = input("Enter the start year to be considered for the dataset(Enter 'none' for default):")
if startYear=='none':
  startYear = '2015'
startDate = '01/01/' + startYear

"""Get historic data for the stock using yahoo_fin"""

stock_data = get_data(ticker, start_date=startDate, end_date=datetime.today().strftime('%m/%d/%Y'), index_as_date = True, interval="1d")
dates = list(range(0,int(len(stock_data))))
prices = stock_data['close']
stock_data

"""Impute the missing data with the median data """

prices[np.isnan(prices)] = np.median(prices[~np.isnan(prices)])

"""Plot the original data"""

plt.plot(stock_data['close'], label = 'Close Price History')
plt.title('Linear Regression | Time vs Price | Original Data | '+ticker)
plt.legend()
plt.xlabel('Date (as integers)')
plt.show()

"""Convert dates and prices to numpy array"""

dates = np.asanyarray(dates)
prices = np.asanyarray(prices)
dates = np.reshape(dates,(len(dates), 1))
prices = np.reshape(prices,(len(prices), 1))

"""Get previous model accuracy - Load pickle file"""

try:
  pick_in = pickle.open('prediction.pickle', 'rb')
  reg = pickle.load(pick_in)
  xtrain, xtest, ytrain, ytest = train_test_split(dates, prices, test_size=0.2)
  best = reg.score(ytrain, ytest)
except:
  pass

"""Get the best accuracy model"""

best = 0
for _ in range(100):
  xtrain, xtest, ytrain, ytest = train_test_split(dates, prices, test_size = 0.2)
  reg = LinearRegression().fit(xtrain, ytrain)
  acc = reg.score(xtest, ytest)
  if acc > best:
    best = acc
    #Save model as pickle file
    with open('prediction.pickle', 'wb') as f:
      pickle.dump(reg, f)
    print(acc)

"""Load the regression model"""

pick_in = open('prediction.pickle','rb')
reg = pickle.load(pick_in)

"""Find average accuracy"""

mean = 0
for i in range(10):
  msk = np.random.rand(len(stock_data)) < 0.8
  xtest = dates[~msk]
  ytest = prices[~msk]
  mean += reg.score(xtest, ytest)

print("Average Accuracy: ", mean/10)

"""Get the number of days after which the user wants to predict the stock price"""

noOfDays = int(input('Enter the number of days after which you wish to predict the stock price(Max value: 365):'))
if noOfDays > 365:
  print("Error: Invalid input - Max number of days is 365. Giving results using default value = 365")
  noOfDays = 365
elif noOfDays < 0:
  print("Error: Invalid input - Min number of days is 0. Giving results using default value = 365")
  noOfDays = 365

"""Predict stock price"""

predicted_price = reg.predict(np.array([[int(len(dates)+noOfDays)]]))
for i in predicted_price:
  for j in i:
    print("Expected stock price after", noOfDays, " days is:", j)

"""Plot the expected and actual values"""

plt.plot(xtest, ytest, color='green',linewidth=1, label= 'Actual Price') #plotting the initial datapoints
plt.plot(xtest, reg.predict(xtest), color='blue', linewidth=3, label = 'Predicted Price') #plotting the line made by linear regression
plt.title('Linear Regression | Time vs. Price ')
plt.legend()
plt.xlabel('Date Integer')
plt.show()